/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface ProtocolInterface extends ethers.utils.Interface {
  functions: {
    "liquidityPools()": FunctionFragment;
    "optionRegistry()": FunctionFragment;
    "priceFeed()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "liquidityPools",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "optionRegistry",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "priceFeed", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "liquidityPools",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "optionRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "priceFeed", data: BytesLike): Result;

  events: {};
}

export class Protocol extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: ProtocolInterface;

  functions: {
    liquidityPools(overrides?: CallOverrides): Promise<[string]>;

    "liquidityPools()"(overrides?: CallOverrides): Promise<[string]>;

    optionRegistry(overrides?: CallOverrides): Promise<[string]>;

    "optionRegistry()"(overrides?: CallOverrides): Promise<[string]>;

    priceFeed(overrides?: CallOverrides): Promise<[string]>;

    "priceFeed()"(overrides?: CallOverrides): Promise<[string]>;
  };

  liquidityPools(overrides?: CallOverrides): Promise<string>;

  "liquidityPools()"(overrides?: CallOverrides): Promise<string>;

  optionRegistry(overrides?: CallOverrides): Promise<string>;

  "optionRegistry()"(overrides?: CallOverrides): Promise<string>;

  priceFeed(overrides?: CallOverrides): Promise<string>;

  "priceFeed()"(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    liquidityPools(overrides?: CallOverrides): Promise<string>;

    "liquidityPools()"(overrides?: CallOverrides): Promise<string>;

    optionRegistry(overrides?: CallOverrides): Promise<string>;

    "optionRegistry()"(overrides?: CallOverrides): Promise<string>;

    priceFeed(overrides?: CallOverrides): Promise<string>;

    "priceFeed()"(overrides?: CallOverrides): Promise<string>;
  };

  filters: {};

  estimateGas: {
    liquidityPools(overrides?: CallOverrides): Promise<BigNumber>;

    "liquidityPools()"(overrides?: CallOverrides): Promise<BigNumber>;

    optionRegistry(overrides?: CallOverrides): Promise<BigNumber>;

    "optionRegistry()"(overrides?: CallOverrides): Promise<BigNumber>;

    priceFeed(overrides?: CallOverrides): Promise<BigNumber>;

    "priceFeed()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    liquidityPools(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "liquidityPools()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    optionRegistry(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "optionRegistry()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    priceFeed(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "priceFeed()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
