/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface OptionRegistryInterface extends ethers.utils.Interface {
  functions: {
    "VERSION()": FunctionFragment;
    "_max(uint256,uint256)": FunctionFragment;
    "_min(uint256,uint256)": FunctionFragment;
    "calculateWriterSettlement(uint256,address)": FunctionFragment;
    "close(address,uint256)": FunctionFragment;
    "earlyExercised(address)": FunctionFragment;
    "exercise(address,uint256)": FunctionFragment;
    "getIssuanceHash(tuple)": FunctionFragment;
    "getSeriesAddress(bytes32)": FunctionFragment;
    "getSeriesInfo(address)": FunctionFragment;
    "holdersSettlement(address)": FunctionFragment;
    "issue(address,address,uint256,uint8,uint256)": FunctionFragment;
    "open(address,uint256)": FunctionFragment;
    "openInterest(address)": FunctionFragment;
    "redeem(address)": FunctionFragment;
    "redeemWriter(address,address)": FunctionFragment;
    "seriesInfo(address)": FunctionFragment;
    "settle(address)": FunctionFragment;
    "totalInterest(address)": FunctionFragment;
    "writers(address,address)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "VERSION", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "_max",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "_min",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateWriterSettlement",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "close",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "earlyExercised",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "exercise",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getIssuanceHash",
    values: [
      {
        expiration: BigNumberish;
        flavor: BigNumberish;
        strike: BigNumberish;
        underlying: string;
        strikeAsset: string;
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getSeriesAddress",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getSeriesInfo",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "holdersSettlement",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "issue",
    values: [string, string, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "open",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "openInterest",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "redeem", values: [string]): string;
  encodeFunctionData(
    functionFragment: "redeemWriter",
    values: [string, string]
  ): string;
  encodeFunctionData(functionFragment: "seriesInfo", values: [string]): string;
  encodeFunctionData(functionFragment: "settle", values: [string]): string;
  encodeFunctionData(
    functionFragment: "totalInterest",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "writers",
    values: [string, string]
  ): string;

  decodeFunctionResult(functionFragment: "VERSION", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "_max", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "_min", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "calculateWriterSettlement",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "close", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "earlyExercised",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "exercise", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getIssuanceHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSeriesAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSeriesInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "holdersSettlement",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "issue", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "open", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "openInterest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "redeem", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "redeemWriter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "seriesInfo", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "settle", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalInterest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "writers", data: BytesLike): Result;

  events: {
    "OptionTokenCreated(address)": EventFragment;
    "SeriesRedeemed(address,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OptionTokenCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SeriesRedeemed"): EventFragment;
}

export class OptionRegistry extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: OptionRegistryInterface;

  functions: {
    VERSION(overrides?: CallOverrides): Promise<[string]>;

    "VERSION()"(overrides?: CallOverrides): Promise<[string]>;

    _max(
      a: BigNumberish,
      b: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "_max(uint256,uint256)"(
      a: BigNumberish,
      b: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    _min(
      a: BigNumberish,
      b: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "_min(uint256,uint256)"(
      a: BigNumberish,
      b: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    calculateWriterSettlement(
      written: BigNumberish,
      _series: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { underlying: BigNumber; strikeAsset: BigNumber }
    >;

    "calculateWriterSettlement(uint256,address)"(
      written: BigNumberish,
      _series: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { underlying: BigNumber; strikeAsset: BigNumber }
    >;

    close(
      _series: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "close(address,uint256)"(
      _series: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    earlyExercised(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "earlyExercised(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    exercise(
      _series: string,
      amount: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    "exercise(address,uint256)"(
      _series: string,
      amount: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    getIssuanceHash(
      _series: {
        expiration: BigNumberish;
        flavor: BigNumberish;
        strike: BigNumberish;
        underlying: string;
        strikeAsset: string;
      },
      overrides?: CallOverrides
    ): Promise<[string]>;

    "getIssuanceHash(tuple)"(
      _series: {
        expiration: BigNumberish;
        flavor: BigNumberish;
        strike: BigNumberish;
        underlying: string;
        strikeAsset: string;
      },
      overrides?: CallOverrides
    ): Promise<[string]>;

    getSeriesAddress(
      issuanceHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "getSeriesAddress(bytes32)"(
      issuanceHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getSeriesInfo(
      series: string,
      overrides?: CallOverrides
    ): Promise<
      [
        [BigNumber, number, BigNumber, string, string] & {
          expiration: BigNumber;
          flavor: number;
          strike: BigNumber;
          underlying: string;
          strikeAsset: string;
        }
      ]
    >;

    "getSeriesInfo(address)"(
      series: string,
      overrides?: CallOverrides
    ): Promise<
      [
        [BigNumber, number, BigNumber, string, string] & {
          expiration: BigNumber;
          flavor: number;
          strike: BigNumber;
          underlying: string;
          strikeAsset: string;
        }
      ]
    >;

    holdersSettlement(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "holdersSettlement(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    issue(
      underlying: string,
      strikeAsset: string,
      expiration: BigNumberish,
      flavor: BigNumberish,
      strike: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "issue(address,address,uint256,uint8,uint256)"(
      underlying: string,
      strikeAsset: string,
      expiration: BigNumberish,
      flavor: BigNumberish,
      strike: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    open(
      _series: string,
      amount: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    "open(address,uint256)"(
      _series: string,
      amount: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    openInterest(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    "openInterest(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    redeem(
      _series: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "redeem(address)"(
      _series: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    redeemWriter(
      _series: string,
      writer: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "redeemWriter(address,address)"(
      _series: string,
      writer: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    seriesInfo(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, number, BigNumber, string, string] & {
        expiration: BigNumber;
        flavor: number;
        strike: BigNumber;
        underlying: string;
        strikeAsset: string;
      }
    >;

    "seriesInfo(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, number, BigNumber, string, string] & {
        expiration: BigNumber;
        flavor: number;
        strike: BigNumber;
        underlying: string;
        strikeAsset: string;
      }
    >;

    settle(
      _series: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "settle(address)"(
      _series: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    totalInterest(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "totalInterest(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    writers(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "writers(address,address)"(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;
  };

  VERSION(overrides?: CallOverrides): Promise<string>;

  "VERSION()"(overrides?: CallOverrides): Promise<string>;

  _max(
    a: BigNumberish,
    b: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "_max(uint256,uint256)"(
    a: BigNumberish,
    b: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  _min(
    a: BigNumberish,
    b: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "_min(uint256,uint256)"(
    a: BigNumberish,
    b: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  calculateWriterSettlement(
    written: BigNumberish,
    _series: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { underlying: BigNumber; strikeAsset: BigNumber }
  >;

  "calculateWriterSettlement(uint256,address)"(
    written: BigNumberish,
    _series: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { underlying: BigNumber; strikeAsset: BigNumber }
  >;

  close(
    _series: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "close(address,uint256)"(
    _series: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  earlyExercised(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  "earlyExercised(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  exercise(
    _series: string,
    amount: BigNumberish,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  "exercise(address,uint256)"(
    _series: string,
    amount: BigNumberish,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  getIssuanceHash(
    _series: {
      expiration: BigNumberish;
      flavor: BigNumberish;
      strike: BigNumberish;
      underlying: string;
      strikeAsset: string;
    },
    overrides?: CallOverrides
  ): Promise<string>;

  "getIssuanceHash(tuple)"(
    _series: {
      expiration: BigNumberish;
      flavor: BigNumberish;
      strike: BigNumberish;
      underlying: string;
      strikeAsset: string;
    },
    overrides?: CallOverrides
  ): Promise<string>;

  getSeriesAddress(
    issuanceHash: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  "getSeriesAddress(bytes32)"(
    issuanceHash: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  getSeriesInfo(
    series: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, number, BigNumber, string, string] & {
      expiration: BigNumber;
      flavor: number;
      strike: BigNumber;
      underlying: string;
      strikeAsset: string;
    }
  >;

  "getSeriesInfo(address)"(
    series: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, number, BigNumber, string, string] & {
      expiration: BigNumber;
      flavor: number;
      strike: BigNumber;
      underlying: string;
      strikeAsset: string;
    }
  >;

  holdersSettlement(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "holdersSettlement(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  issue(
    underlying: string,
    strikeAsset: string,
    expiration: BigNumberish,
    flavor: BigNumberish,
    strike: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "issue(address,address,uint256,uint8,uint256)"(
    underlying: string,
    strikeAsset: string,
    expiration: BigNumberish,
    flavor: BigNumberish,
    strike: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  open(
    _series: string,
    amount: BigNumberish,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  "open(address,uint256)"(
    _series: string,
    amount: BigNumberish,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  openInterest(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  "openInterest(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  redeem(_series: string, overrides?: Overrides): Promise<ContractTransaction>;

  "redeem(address)"(
    _series: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  redeemWriter(
    _series: string,
    writer: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "redeemWriter(address,address)"(
    _series: string,
    writer: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  seriesInfo(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, number, BigNumber, string, string] & {
      expiration: BigNumber;
      flavor: number;
      strike: BigNumber;
      underlying: string;
      strikeAsset: string;
    }
  >;

  "seriesInfo(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, number, BigNumber, string, string] & {
      expiration: BigNumber;
      flavor: number;
      strike: BigNumber;
      underlying: string;
      strikeAsset: string;
    }
  >;

  settle(_series: string, overrides?: Overrides): Promise<ContractTransaction>;

  "settle(address)"(
    _series: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  totalInterest(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  "totalInterest(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  writers(
    arg0: string,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "writers(address,address)"(
    arg0: string,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  callStatic: {
    VERSION(overrides?: CallOverrides): Promise<string>;

    "VERSION()"(overrides?: CallOverrides): Promise<string>;

    _max(
      a: BigNumberish,
      b: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "_max(uint256,uint256)"(
      a: BigNumberish,
      b: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _min(
      a: BigNumberish,
      b: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "_min(uint256,uint256)"(
      a: BigNumberish,
      b: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculateWriterSettlement(
      written: BigNumberish,
      _series: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { underlying: BigNumber; strikeAsset: BigNumber }
    >;

    "calculateWriterSettlement(uint256,address)"(
      written: BigNumberish,
      _series: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { underlying: BigNumber; strikeAsset: BigNumber }
    >;

    close(
      _series: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "close(address,uint256)"(
      _series: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    earlyExercised(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "earlyExercised(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    exercise(
      _series: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "exercise(address,uint256)"(
      _series: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    getIssuanceHash(
      _series: {
        expiration: BigNumberish;
        flavor: BigNumberish;
        strike: BigNumberish;
        underlying: string;
        strikeAsset: string;
      },
      overrides?: CallOverrides
    ): Promise<string>;

    "getIssuanceHash(tuple)"(
      _series: {
        expiration: BigNumberish;
        flavor: BigNumberish;
        strike: BigNumberish;
        underlying: string;
        strikeAsset: string;
      },
      overrides?: CallOverrides
    ): Promise<string>;

    getSeriesAddress(
      issuanceHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    "getSeriesAddress(bytes32)"(
      issuanceHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    getSeriesInfo(
      series: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, number, BigNumber, string, string] & {
        expiration: BigNumber;
        flavor: number;
        strike: BigNumber;
        underlying: string;
        strikeAsset: string;
      }
    >;

    "getSeriesInfo(address)"(
      series: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, number, BigNumber, string, string] & {
        expiration: BigNumber;
        flavor: number;
        strike: BigNumber;
        underlying: string;
        strikeAsset: string;
      }
    >;

    holdersSettlement(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "holdersSettlement(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    issue(
      underlying: string,
      strikeAsset: string,
      expiration: BigNumberish,
      flavor: BigNumberish,
      strike: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "issue(address,address,uint256,uint8,uint256)"(
      underlying: string,
      strikeAsset: string,
      expiration: BigNumberish,
      flavor: BigNumberish,
      strike: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    open(
      _series: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "open(address,uint256)"(
      _series: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    openInterest(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "openInterest(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    redeem(
      _series: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { underlying: BigNumber; strikeAsset: BigNumber }
    >;

    "redeem(address)"(
      _series: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { underlying: BigNumber; strikeAsset: BigNumber }
    >;

    redeemWriter(
      _series: string,
      writer: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { underlying: BigNumber; strikeAsset: BigNumber }
    >;

    "redeemWriter(address,address)"(
      _series: string,
      writer: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { underlying: BigNumber; strikeAsset: BigNumber }
    >;

    seriesInfo(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, number, BigNumber, string, string] & {
        expiration: BigNumber;
        flavor: number;
        strike: BigNumber;
        underlying: string;
        strikeAsset: string;
      }
    >;

    "seriesInfo(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, number, BigNumber, string, string] & {
        expiration: BigNumber;
        flavor: number;
        strike: BigNumber;
        underlying: string;
        strikeAsset: string;
      }
    >;

    settle(_series: string, overrides?: CallOverrides): Promise<BigNumber>;

    "settle(address)"(
      _series: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalInterest(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "totalInterest(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    writers(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "writers(address,address)"(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {
    OptionTokenCreated(token: null): EventFilter;

    SeriesRedeemed(
      series: null,
      underlyingAmount: null,
      strikeAmount: null
    ): EventFilter;
  };

  estimateGas: {
    VERSION(overrides?: CallOverrides): Promise<BigNumber>;

    "VERSION()"(overrides?: CallOverrides): Promise<BigNumber>;

    _max(
      a: BigNumberish,
      b: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "_max(uint256,uint256)"(
      a: BigNumberish,
      b: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _min(
      a: BigNumberish,
      b: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "_min(uint256,uint256)"(
      a: BigNumberish,
      b: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculateWriterSettlement(
      written: BigNumberish,
      _series: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "calculateWriterSettlement(uint256,address)"(
      written: BigNumberish,
      _series: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    close(
      _series: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "close(address,uint256)"(
      _series: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    earlyExercised(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "earlyExercised(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    exercise(
      _series: string,
      amount: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    "exercise(address,uint256)"(
      _series: string,
      amount: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    getIssuanceHash(
      _series: {
        expiration: BigNumberish;
        flavor: BigNumberish;
        strike: BigNumberish;
        underlying: string;
        strikeAsset: string;
      },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getIssuanceHash(tuple)"(
      _series: {
        expiration: BigNumberish;
        flavor: BigNumberish;
        strike: BigNumberish;
        underlying: string;
        strikeAsset: string;
      },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSeriesAddress(
      issuanceHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getSeriesAddress(bytes32)"(
      issuanceHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSeriesInfo(
      series: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getSeriesInfo(address)"(
      series: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    holdersSettlement(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "holdersSettlement(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    issue(
      underlying: string,
      strikeAsset: string,
      expiration: BigNumberish,
      flavor: BigNumberish,
      strike: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "issue(address,address,uint256,uint8,uint256)"(
      underlying: string,
      strikeAsset: string,
      expiration: BigNumberish,
      flavor: BigNumberish,
      strike: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    open(
      _series: string,
      amount: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    "open(address,uint256)"(
      _series: string,
      amount: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    openInterest(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "openInterest(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    redeem(_series: string, overrides?: Overrides): Promise<BigNumber>;

    "redeem(address)"(
      _series: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    redeemWriter(
      _series: string,
      writer: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "redeemWriter(address,address)"(
      _series: string,
      writer: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    seriesInfo(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "seriesInfo(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    settle(_series: string, overrides?: Overrides): Promise<BigNumber>;

    "settle(address)"(
      _series: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    totalInterest(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "totalInterest(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    writers(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "writers(address,address)"(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    VERSION(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "VERSION()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _max(
      a: BigNumberish,
      b: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "_max(uint256,uint256)"(
      a: BigNumberish,
      b: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    _min(
      a: BigNumberish,
      b: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "_min(uint256,uint256)"(
      a: BigNumberish,
      b: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calculateWriterSettlement(
      written: BigNumberish,
      _series: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "calculateWriterSettlement(uint256,address)"(
      written: BigNumberish,
      _series: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    close(
      _series: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "close(address,uint256)"(
      _series: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    earlyExercised(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "earlyExercised(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    exercise(
      _series: string,
      amount: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    "exercise(address,uint256)"(
      _series: string,
      amount: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    getIssuanceHash(
      _series: {
        expiration: BigNumberish;
        flavor: BigNumberish;
        strike: BigNumberish;
        underlying: string;
        strikeAsset: string;
      },
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getIssuanceHash(tuple)"(
      _series: {
        expiration: BigNumberish;
        flavor: BigNumberish;
        strike: BigNumberish;
        underlying: string;
        strikeAsset: string;
      },
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSeriesAddress(
      issuanceHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getSeriesAddress(bytes32)"(
      issuanceHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSeriesInfo(
      series: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getSeriesInfo(address)"(
      series: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    holdersSettlement(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "holdersSettlement(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    issue(
      underlying: string,
      strikeAsset: string,
      expiration: BigNumberish,
      flavor: BigNumberish,
      strike: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "issue(address,address,uint256,uint8,uint256)"(
      underlying: string,
      strikeAsset: string,
      expiration: BigNumberish,
      flavor: BigNumberish,
      strike: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    open(
      _series: string,
      amount: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    "open(address,uint256)"(
      _series: string,
      amount: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    openInterest(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "openInterest(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    redeem(
      _series: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "redeem(address)"(
      _series: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    redeemWriter(
      _series: string,
      writer: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "redeemWriter(address,address)"(
      _series: string,
      writer: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    seriesInfo(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "seriesInfo(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    settle(
      _series: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "settle(address)"(
      _series: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    totalInterest(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "totalInterest(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    writers(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "writers(address,address)"(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
