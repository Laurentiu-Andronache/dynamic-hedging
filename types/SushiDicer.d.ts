/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  PayableOverrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface SushiDicerInterface extends ethers.utils.Interface {
  functions: {
    "masterChef()": FunctionFragment;
    "sushiRouterAddress()": FunctionFragment;
    "sushiWethSLP()": FunctionFragment;
    "swapFromEthAndStake(address,uint256)": FunctionFragment;
    "wethAddress()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "masterChef",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "sushiRouterAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "sushiWethSLP",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "swapFromEthAndStake",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "wethAddress",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "masterChef", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "sushiRouterAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sushiWethSLP",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapFromEthAndStake",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "wethAddress",
    data: BytesLike
  ): Result;

  events: {};
}

export class SushiDicer extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: SushiDicerInterface;

  functions: {
    masterChef(overrides?: CallOverrides): Promise<[string]>;

    "masterChef()"(overrides?: CallOverrides): Promise<[string]>;

    sushiRouterAddress(overrides?: CallOverrides): Promise<[string]>;

    "sushiRouterAddress()"(overrides?: CallOverrides): Promise<[string]>;

    sushiWethSLP(overrides?: CallOverrides): Promise<[string]>;

    "sushiWethSLP()"(overrides?: CallOverrides): Promise<[string]>;

    swapFromEthAndStake(
      to: string,
      pid: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    "swapFromEthAndStake(address,uint256)"(
      to: string,
      pid: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    wethAddress(overrides?: CallOverrides): Promise<[string]>;

    "wethAddress()"(overrides?: CallOverrides): Promise<[string]>;
  };

  masterChef(overrides?: CallOverrides): Promise<string>;

  "masterChef()"(overrides?: CallOverrides): Promise<string>;

  sushiRouterAddress(overrides?: CallOverrides): Promise<string>;

  "sushiRouterAddress()"(overrides?: CallOverrides): Promise<string>;

  sushiWethSLP(overrides?: CallOverrides): Promise<string>;

  "sushiWethSLP()"(overrides?: CallOverrides): Promise<string>;

  swapFromEthAndStake(
    to: string,
    pid: BigNumberish,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  "swapFromEthAndStake(address,uint256)"(
    to: string,
    pid: BigNumberish,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  wethAddress(overrides?: CallOverrides): Promise<string>;

  "wethAddress()"(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    masterChef(overrides?: CallOverrides): Promise<string>;

    "masterChef()"(overrides?: CallOverrides): Promise<string>;

    sushiRouterAddress(overrides?: CallOverrides): Promise<string>;

    "sushiRouterAddress()"(overrides?: CallOverrides): Promise<string>;

    sushiWethSLP(overrides?: CallOverrides): Promise<string>;

    "sushiWethSLP()"(overrides?: CallOverrides): Promise<string>;

    swapFromEthAndStake(
      to: string,
      pid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "swapFromEthAndStake(address,uint256)"(
      to: string,
      pid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    wethAddress(overrides?: CallOverrides): Promise<string>;

    "wethAddress()"(overrides?: CallOverrides): Promise<string>;
  };

  filters: {};

  estimateGas: {
    masterChef(overrides?: CallOverrides): Promise<BigNumber>;

    "masterChef()"(overrides?: CallOverrides): Promise<BigNumber>;

    sushiRouterAddress(overrides?: CallOverrides): Promise<BigNumber>;

    "sushiRouterAddress()"(overrides?: CallOverrides): Promise<BigNumber>;

    sushiWethSLP(overrides?: CallOverrides): Promise<BigNumber>;

    "sushiWethSLP()"(overrides?: CallOverrides): Promise<BigNumber>;

    swapFromEthAndStake(
      to: string,
      pid: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    "swapFromEthAndStake(address,uint256)"(
      to: string,
      pid: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    wethAddress(overrides?: CallOverrides): Promise<BigNumber>;

    "wethAddress()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    masterChef(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "masterChef()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    sushiRouterAddress(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "sushiRouterAddress()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    sushiWethSLP(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "sushiWethSLP()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    swapFromEthAndStake(
      to: string,
      pid: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    "swapFromEthAndStake(address,uint256)"(
      to: string,
      pid: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    wethAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "wethAddress()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
