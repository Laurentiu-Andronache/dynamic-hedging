/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface LiquidityPoolInterface extends ethers.utils.Interface {
  functions: {
    "addLiquidity(uint256)": FunctionFragment;
    "allowance(address,address)": FunctionFragment;
    "approve(address,uint256)": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "blackScholesCalc(bytes16,bytes16,bytes16,bytes16,bytes16,uint8)": FunctionFragment;
    "blackScholesCalcGreeks(bytes16,bytes16,bytes16,bytes16,bytes16,uint8)": FunctionFragment;
    "blackScholesEstimate(uint256,uint256,uint256)": FunctionFragment;
    "callsVolatilitySkew(uint256)": FunctionFragment;
    "decimals()": FunctionFragment;
    "decreaseAllowance(address,uint256)": FunctionFragment;
    "getDelta(uint256,uint256,uint256,uint256,uint256,uint8)": FunctionFragment;
    "getDeltaWei(uint256,uint256,uint256,uint256,uint256,uint8)": FunctionFragment;
    "getPortfolioDelta(uint256)": FunctionFragment;
    "getVolatilitySkew(uint8)": FunctionFragment;
    "impliedVolatility(address)": FunctionFragment;
    "increaseAllowance(address,uint256)": FunctionFragment;
    "issueAndWriteOption(tuple,uint256,address)": FunctionFragment;
    "name()": FunctionFragment;
    "owner()": FunctionFragment;
    "protocol()": FunctionFragment;
    "putsVolatilitySkew(uint256)": FunctionFragment;
    "quotePrice(tuple)": FunctionFragment;
    "quotePriceGreeks(tuple)": FunctionFragment;
    "quotePriceWithUtilization(tuple,uint256)": FunctionFragment;
    "quotePriceWithUtilizationGreeks(tuple,uint256)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "retBasedBlackScholesEstimate(uint256[],uint256,uint256)": FunctionFragment;
    "retBlackScholesCalc(uint256,uint256,uint256,uint256,uint256,uint8)": FunctionFragment;
    "retBlackScholesCalcGreeks(uint256,uint256,uint256,uint256,uint256,uint8)": FunctionFragment;
    "riskFreeRate()": FunctionFragment;
    "setVolatilitySkew(int256[7],uint8)": FunctionFragment;
    "sqrt(uint256)": FunctionFragment;
    "stddev(uint256[])": FunctionFragment;
    "strikeAllocated()": FunctionFragment;
    "strikeAsset()": FunctionFragment;
    "symbol()": FunctionFragment;
    "totalAmountCall()": FunctionFragment;
    "totalAmountPut()": FunctionFragment;
    "totalSupply()": FunctionFragment;
    "transfer(address,uint256)": FunctionFragment;
    "transferFrom(address,address,uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "underlyingAllocated()": FunctionFragment;
    "underlyingAsset()": FunctionFragment;
    "weightedStrikeCall()": FunctionFragment;
    "weightedStrikePut()": FunctionFragment;
    "weightedTimeCall()": FunctionFragment;
    "weightedTimePut()": FunctionFragment;
    "writeOption(address,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "addLiquidity",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "allowance",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
  encodeFunctionData(
    functionFragment: "blackScholesCalc",
    values: [
      BytesLike,
      BytesLike,
      BytesLike,
      BytesLike,
      BytesLike,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "blackScholesCalcGreeks",
    values: [
      BytesLike,
      BytesLike,
      BytesLike,
      BytesLike,
      BytesLike,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "blackScholesEstimate",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "callsVolatilitySkew",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "decreaseAllowance",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getDelta",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getDeltaWei",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getPortfolioDelta",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getVolatilitySkew",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "impliedVolatility",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "increaseAllowance",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "issueAndWriteOption",
    values: [
      {
        expiration: BigNumberish;
        flavor: BigNumberish;
        strike: BigNumberish;
        underlying: string;
        strikeAsset: string;
      },
      BigNumberish,
      string
    ]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "protocol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "putsVolatilitySkew",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "quotePrice",
    values: [
      {
        expiration: BigNumberish;
        flavor: BigNumberish;
        strike: BigNumberish;
        underlying: string;
        strikeAsset: string;
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "quotePriceGreeks",
    values: [
      {
        expiration: BigNumberish;
        flavor: BigNumberish;
        strike: BigNumberish;
        underlying: string;
        strikeAsset: string;
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "quotePriceWithUtilization",
    values: [
      {
        expiration: BigNumberish;
        flavor: BigNumberish;
        strike: BigNumberish;
        underlying: string;
        strikeAsset: string;
      },
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "quotePriceWithUtilizationGreeks",
    values: [
      {
        expiration: BigNumberish;
        flavor: BigNumberish;
        strike: BigNumberish;
        underlying: string;
        strikeAsset: string;
      },
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "retBasedBlackScholesEstimate",
    values: [BigNumberish[], BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "retBlackScholesCalc",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "retBlackScholesCalcGreeks",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "riskFreeRate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setVolatilitySkew",
    values: [
      [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      BigNumberish
    ]
  ): string;
  encodeFunctionData(functionFragment: "sqrt", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "stddev",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "strikeAllocated",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "strikeAsset",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalAmountCall",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalAmountPut",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "underlyingAllocated",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "underlyingAsset",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "weightedStrikeCall",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "weightedStrikePut",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "weightedTimeCall",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "weightedTimePut",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "writeOption",
    values: [string, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "addLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "blackScholesCalc",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "blackScholesCalcGreeks",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "blackScholesEstimate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "callsVolatilitySkew",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "decreaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getDelta", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getDeltaWei",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPortfolioDelta",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVolatilitySkew",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "impliedVolatility",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "increaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "issueAndWriteOption",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "protocol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "putsVolatilitySkew",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "quotePrice", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "quotePriceGreeks",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "quotePriceWithUtilization",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "quotePriceWithUtilizationGreeks",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "retBasedBlackScholesEstimate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "retBlackScholesCalc",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "retBlackScholesCalcGreeks",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "riskFreeRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setVolatilitySkew",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "sqrt", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "stddev", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "strikeAllocated",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "strikeAsset",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalAmountCall",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalAmountPut",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "underlyingAllocated",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "underlyingAsset",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "weightedStrikeCall",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "weightedStrikePut",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "weightedTimeCall",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "weightedTimePut",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "writeOption",
    data: BytesLike
  ): Result;

  events: {
    "Approval(address,address,uint256)": EventFragment;
    "ImpliedVolatilityUpdated(address,uint256)": EventFragment;
    "LiquidityAdded(uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Transfer(address,address,uint256)": EventFragment;
    "UnderlyingAdded(address)": EventFragment;
    "WriteOption(address,uint256,uint256,uint256,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ImpliedVolatilityUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LiquidityAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UnderlyingAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WriteOption"): EventFragment;
}

export class LiquidityPool extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: LiquidityPoolInterface;

  functions: {
    addLiquidity(
      amount: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    "addLiquidity(uint256)"(
      amount: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "allowance(address,address)"(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "approve(address,uint256)"(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    "balanceOf(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    blackScholesCalc(
      price: BytesLike,
      strike: BytesLike,
      time: BytesLike,
      vol: BytesLike,
      rfr: BytesLike,
      flavor: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "blackScholesCalc(bytes16,bytes16,bytes16,bytes16,bytes16,uint8)"(
      price: BytesLike,
      strike: BytesLike,
      time: BytesLike,
      vol: BytesLike,
      rfr: BytesLike,
      flavor: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    blackScholesCalcGreeks(
      price: BytesLike,
      strike: BytesLike,
      time: BytesLike,
      vol: BytesLike,
      rfr: BytesLike,
      flavor: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string, string] & { quote: string; delta: string }>;

    "blackScholesCalcGreeks(bytes16,bytes16,bytes16,bytes16,bytes16,uint8)"(
      price: BytesLike,
      strike: BytesLike,
      time: BytesLike,
      vol: BytesLike,
      rfr: BytesLike,
      flavor: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string, string] & { quote: string; delta: string }>;

    blackScholesEstimate(
      _vol: BigNumberish,
      _underlying: BigNumberish,
      _time: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { estimate: BigNumber }>;

    "blackScholesEstimate(uint256,uint256,uint256)"(
      _vol: BigNumberish,
      _underlying: BigNumberish,
      _time: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { estimate: BigNumber }>;

    callsVolatilitySkew(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "callsVolatilitySkew(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    decimals(overrides?: CallOverrides): Promise<[number]>;

    "decimals()"(overrides?: CallOverrides): Promise<[number]>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "decreaseAllowance(address,uint256)"(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    getDelta(
      price: BigNumberish,
      strike: BigNumberish,
      expiration: BigNumberish,
      vol: BigNumberish,
      rfr: BigNumberish,
      flavor: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "getDelta(uint256,uint256,uint256,uint256,uint256,uint8)"(
      price: BigNumberish,
      strike: BigNumberish,
      expiration: BigNumberish,
      vol: BigNumberish,
      rfr: BigNumberish,
      flavor: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getDeltaWei(
      price: BigNumberish,
      strike: BigNumberish,
      expiration: BigNumberish,
      vol: BigNumberish,
      rfr: BigNumberish,
      flavor: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "getDeltaWei(uint256,uint256,uint256,uint256,uint256,uint8)"(
      price: BigNumberish,
      strike: BigNumberish,
      expiration: BigNumberish,
      vol: BigNumberish,
      rfr: BigNumberish,
      flavor: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getPortfolioDelta(
      underlyingPrice: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "getPortfolioDelta(uint256)"(
      underlyingPrice: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getVolatilitySkew(
      flavor: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[[string, string, string, string, string, string, string]]>;

    "getVolatilitySkew(uint8)"(
      flavor: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[[string, string, string, string, string, string, string]]>;

    impliedVolatility(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "impliedVolatility(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "increaseAllowance(address,uint256)"(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    issueAndWriteOption(
      optionSeries: {
        expiration: BigNumberish;
        flavor: BigNumberish;
        strike: BigNumberish;
        underlying: string;
        strikeAsset: string;
      },
      amount: BigNumberish,
      destroy: string,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    "issueAndWriteOption(tuple,uint256,address)"(
      optionSeries: {
        expiration: BigNumberish;
        flavor: BigNumberish;
        strike: BigNumberish;
        underlying: string;
        strikeAsset: string;
      },
      amount: BigNumberish,
      destroy: string,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    name(overrides?: CallOverrides): Promise<[string]>;

    "name()"(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    "owner()"(overrides?: CallOverrides): Promise<[string]>;

    protocol(overrides?: CallOverrides): Promise<[string]>;

    "protocol()"(overrides?: CallOverrides): Promise<[string]>;

    putsVolatilitySkew(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "putsVolatilitySkew(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    quotePrice(
      optionSeries: {
        expiration: BigNumberish;
        flavor: BigNumberish;
        strike: BigNumberish;
        underlying: string;
        strikeAsset: string;
      },
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "quotePrice(tuple)"(
      optionSeries: {
        expiration: BigNumberish;
        flavor: BigNumberish;
        strike: BigNumberish;
        underlying: string;
        strikeAsset: string;
      },
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    quotePriceGreeks(
      optionSeries: {
        expiration: BigNumberish;
        flavor: BigNumberish;
        strike: BigNumberish;
        underlying: string;
        strikeAsset: string;
      },
      overrides?: CallOverrides
    ): Promise<
      [string, string, BigNumber] & {
        quote: string;
        delta: string;
        underlyingPrice: BigNumber;
      }
    >;

    "quotePriceGreeks(tuple)"(
      optionSeries: {
        expiration: BigNumberish;
        flavor: BigNumberish;
        strike: BigNumberish;
        underlying: string;
        strikeAsset: string;
      },
      overrides?: CallOverrides
    ): Promise<
      [string, string, BigNumber] & {
        quote: string;
        delta: string;
        underlyingPrice: BigNumber;
      }
    >;

    quotePriceWithUtilization(
      optionSeries: {
        expiration: BigNumberish;
        flavor: BigNumberish;
        strike: BigNumberish;
        underlying: string;
        strikeAsset: string;
      },
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "quotePriceWithUtilization(tuple,uint256)"(
      optionSeries: {
        expiration: BigNumberish;
        flavor: BigNumberish;
        strike: BigNumberish;
        underlying: string;
        strikeAsset: string;
      },
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    quotePriceWithUtilizationGreeks(
      optionSeries: {
        expiration: BigNumberish;
        flavor: BigNumberish;
        strike: BigNumberish;
        underlying: string;
        strikeAsset: string;
      },
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string, string] & { quote: string; delta: string }>;

    "quotePriceWithUtilizationGreeks(tuple,uint256)"(
      optionSeries: {
        expiration: BigNumberish;
        flavor: BigNumberish;
        strike: BigNumberish;
        underlying: string;
        strikeAsset: string;
      },
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string, string] & { quote: string; delta: string }>;

    renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

    "renounceOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

    retBasedBlackScholesEstimate(
      _numbers: BigNumberish[],
      _underlying: BigNumberish,
      _time: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[void]>;

    "retBasedBlackScholesEstimate(uint256[],uint256,uint256)"(
      _numbers: BigNumberish[],
      _underlying: BigNumberish,
      _time: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[void]>;

    retBlackScholesCalc(
      price: BigNumberish,
      strike: BigNumberish,
      expiration: BigNumberish,
      vol: BigNumberish,
      rfr: BigNumberish,
      flavor: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "retBlackScholesCalc(uint256,uint256,uint256,uint256,uint256,uint8)"(
      price: BigNumberish,
      strike: BigNumberish,
      expiration: BigNumberish,
      vol: BigNumberish,
      rfr: BigNumberish,
      flavor: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    retBlackScholesCalcGreeks(
      price: BigNumberish,
      strike: BigNumberish,
      expiration: BigNumberish,
      vol: BigNumberish,
      rfr: BigNumberish,
      flavor: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string, string] & { quote: string; delta: string }>;

    "retBlackScholesCalcGreeks(uint256,uint256,uint256,uint256,uint256,uint8)"(
      price: BigNumberish,
      strike: BigNumberish,
      expiration: BigNumberish,
      vol: BigNumberish,
      rfr: BigNumberish,
      flavor: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string, string] & { quote: string; delta: string }>;

    riskFreeRate(overrides?: CallOverrides): Promise<[BigNumber]>;

    "riskFreeRate()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    setVolatilitySkew(
      values: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      flavor: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setVolatilitySkew(int256[7],uint8)"(
      values: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      flavor: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    sqrt(x: BigNumberish, overrides?: CallOverrides): Promise<[BigNumber]>;

    "sqrt(uint256)"(
      x: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    stddev(
      numbers: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { sd: BigNumber }>;

    "stddev(uint256[])"(
      numbers: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { sd: BigNumber }>;

    strikeAllocated(overrides?: CallOverrides): Promise<[BigNumber]>;

    "strikeAllocated()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    strikeAsset(overrides?: CallOverrides): Promise<[string]>;

    "strikeAsset()"(overrides?: CallOverrides): Promise<[string]>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    "symbol()"(overrides?: CallOverrides): Promise<[string]>;

    totalAmountCall(overrides?: CallOverrides): Promise<[string]>;

    "totalAmountCall()"(overrides?: CallOverrides): Promise<[string]>;

    totalAmountPut(overrides?: CallOverrides): Promise<[string]>;

    "totalAmountPut()"(overrides?: CallOverrides): Promise<[string]>;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    "totalSupply()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "transfer(address,uint256)"(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "transferFrom(address,address,uint256)"(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    underlyingAllocated(overrides?: CallOverrides): Promise<[BigNumber]>;

    "underlyingAllocated()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    underlyingAsset(overrides?: CallOverrides): Promise<[string]>;

    "underlyingAsset()"(overrides?: CallOverrides): Promise<[string]>;

    weightedStrikeCall(overrides?: CallOverrides): Promise<[string]>;

    "weightedStrikeCall()"(overrides?: CallOverrides): Promise<[string]>;

    weightedStrikePut(overrides?: CallOverrides): Promise<[string]>;

    "weightedStrikePut()"(overrides?: CallOverrides): Promise<[string]>;

    weightedTimeCall(overrides?: CallOverrides): Promise<[string]>;

    "weightedTimeCall()"(overrides?: CallOverrides): Promise<[string]>;

    weightedTimePut(overrides?: CallOverrides): Promise<[string]>;

    "weightedTimePut()"(overrides?: CallOverrides): Promise<[string]>;

    writeOption(
      seriesAddress: string,
      amount: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    "writeOption(address,uint256)"(
      seriesAddress: string,
      amount: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;
  };

  addLiquidity(
    amount: BigNumberish,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  "addLiquidity(uint256)"(
    amount: BigNumberish,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  allowance(
    owner: string,
    spender: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "allowance(address,address)"(
    owner: string,
    spender: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  approve(
    spender: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "approve(address,uint256)"(
    spender: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

  "balanceOf(address)"(
    account: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  blackScholesCalc(
    price: BytesLike,
    strike: BytesLike,
    time: BytesLike,
    vol: BytesLike,
    rfr: BytesLike,
    flavor: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  "blackScholesCalc(bytes16,bytes16,bytes16,bytes16,bytes16,uint8)"(
    price: BytesLike,
    strike: BytesLike,
    time: BytesLike,
    vol: BytesLike,
    rfr: BytesLike,
    flavor: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  blackScholesCalcGreeks(
    price: BytesLike,
    strike: BytesLike,
    time: BytesLike,
    vol: BytesLike,
    rfr: BytesLike,
    flavor: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[string, string] & { quote: string; delta: string }>;

  "blackScholesCalcGreeks(bytes16,bytes16,bytes16,bytes16,bytes16,uint8)"(
    price: BytesLike,
    strike: BytesLike,
    time: BytesLike,
    vol: BytesLike,
    rfr: BytesLike,
    flavor: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[string, string] & { quote: string; delta: string }>;

  blackScholesEstimate(
    _vol: BigNumberish,
    _underlying: BigNumberish,
    _time: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "blackScholesEstimate(uint256,uint256,uint256)"(
    _vol: BigNumberish,
    _underlying: BigNumberish,
    _time: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  callsVolatilitySkew(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  "callsVolatilitySkew(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  decimals(overrides?: CallOverrides): Promise<number>;

  "decimals()"(overrides?: CallOverrides): Promise<number>;

  decreaseAllowance(
    spender: string,
    subtractedValue: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "decreaseAllowance(address,uint256)"(
    spender: string,
    subtractedValue: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  getDelta(
    price: BigNumberish,
    strike: BigNumberish,
    expiration: BigNumberish,
    vol: BigNumberish,
    rfr: BigNumberish,
    flavor: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  "getDelta(uint256,uint256,uint256,uint256,uint256,uint8)"(
    price: BigNumberish,
    strike: BigNumberish,
    expiration: BigNumberish,
    vol: BigNumberish,
    rfr: BigNumberish,
    flavor: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getDeltaWei(
    price: BigNumberish,
    strike: BigNumberish,
    expiration: BigNumberish,
    vol: BigNumberish,
    rfr: BigNumberish,
    flavor: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getDeltaWei(uint256,uint256,uint256,uint256,uint256,uint8)"(
    price: BigNumberish,
    strike: BigNumberish,
    expiration: BigNumberish,
    vol: BigNumberish,
    rfr: BigNumberish,
    flavor: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getPortfolioDelta(
    underlyingPrice: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  "getPortfolioDelta(uint256)"(
    underlyingPrice: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getVolatilitySkew(
    flavor: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[string, string, string, string, string, string, string]>;

  "getVolatilitySkew(uint8)"(
    flavor: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[string, string, string, string, string, string, string]>;

  impliedVolatility(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "impliedVolatility(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  increaseAllowance(
    spender: string,
    addedValue: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "increaseAllowance(address,uint256)"(
    spender: string,
    addedValue: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  issueAndWriteOption(
    optionSeries: {
      expiration: BigNumberish;
      flavor: BigNumberish;
      strike: BigNumberish;
      underlying: string;
      strikeAsset: string;
    },
    amount: BigNumberish,
    destroy: string,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  "issueAndWriteOption(tuple,uint256,address)"(
    optionSeries: {
      expiration: BigNumberish;
      flavor: BigNumberish;
      strike: BigNumberish;
      underlying: string;
      strikeAsset: string;
    },
    amount: BigNumberish,
    destroy: string,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  name(overrides?: CallOverrides): Promise<string>;

  "name()"(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  "owner()"(overrides?: CallOverrides): Promise<string>;

  protocol(overrides?: CallOverrides): Promise<string>;

  "protocol()"(overrides?: CallOverrides): Promise<string>;

  putsVolatilitySkew(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  "putsVolatilitySkew(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  quotePrice(
    optionSeries: {
      expiration: BigNumberish;
      flavor: BigNumberish;
      strike: BigNumberish;
      underlying: string;
      strikeAsset: string;
    },
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "quotePrice(tuple)"(
    optionSeries: {
      expiration: BigNumberish;
      flavor: BigNumberish;
      strike: BigNumberish;
      underlying: string;
      strikeAsset: string;
    },
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  quotePriceGreeks(
    optionSeries: {
      expiration: BigNumberish;
      flavor: BigNumberish;
      strike: BigNumberish;
      underlying: string;
      strikeAsset: string;
    },
    overrides?: CallOverrides
  ): Promise<
    [string, string, BigNumber] & {
      quote: string;
      delta: string;
      underlyingPrice: BigNumber;
    }
  >;

  "quotePriceGreeks(tuple)"(
    optionSeries: {
      expiration: BigNumberish;
      flavor: BigNumberish;
      strike: BigNumberish;
      underlying: string;
      strikeAsset: string;
    },
    overrides?: CallOverrides
  ): Promise<
    [string, string, BigNumber] & {
      quote: string;
      delta: string;
      underlyingPrice: BigNumber;
    }
  >;

  quotePriceWithUtilization(
    optionSeries: {
      expiration: BigNumberish;
      flavor: BigNumberish;
      strike: BigNumberish;
      underlying: string;
      strikeAsset: string;
    },
    amount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "quotePriceWithUtilization(tuple,uint256)"(
    optionSeries: {
      expiration: BigNumberish;
      flavor: BigNumberish;
      strike: BigNumberish;
      underlying: string;
      strikeAsset: string;
    },
    amount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  quotePriceWithUtilizationGreeks(
    optionSeries: {
      expiration: BigNumberish;
      flavor: BigNumberish;
      strike: BigNumberish;
      underlying: string;
      strikeAsset: string;
    },
    amount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[string, string] & { quote: string; delta: string }>;

  "quotePriceWithUtilizationGreeks(tuple,uint256)"(
    optionSeries: {
      expiration: BigNumberish;
      flavor: BigNumberish;
      strike: BigNumberish;
      underlying: string;
      strikeAsset: string;
    },
    amount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[string, string] & { quote: string; delta: string }>;

  renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

  "renounceOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

  retBasedBlackScholesEstimate(
    _numbers: BigNumberish[],
    _underlying: BigNumberish,
    _time: BigNumberish,
    overrides?: CallOverrides
  ): Promise<void>;

  "retBasedBlackScholesEstimate(uint256[],uint256,uint256)"(
    _numbers: BigNumberish[],
    _underlying: BigNumberish,
    _time: BigNumberish,
    overrides?: CallOverrides
  ): Promise<void>;

  retBlackScholesCalc(
    price: BigNumberish,
    strike: BigNumberish,
    expiration: BigNumberish,
    vol: BigNumberish,
    rfr: BigNumberish,
    flavor: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "retBlackScholesCalc(uint256,uint256,uint256,uint256,uint256,uint8)"(
    price: BigNumberish,
    strike: BigNumberish,
    expiration: BigNumberish,
    vol: BigNumberish,
    rfr: BigNumberish,
    flavor: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  retBlackScholesCalcGreeks(
    price: BigNumberish,
    strike: BigNumberish,
    expiration: BigNumberish,
    vol: BigNumberish,
    rfr: BigNumberish,
    flavor: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[string, string] & { quote: string; delta: string }>;

  "retBlackScholesCalcGreeks(uint256,uint256,uint256,uint256,uint256,uint8)"(
    price: BigNumberish,
    strike: BigNumberish,
    expiration: BigNumberish,
    vol: BigNumberish,
    rfr: BigNumberish,
    flavor: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[string, string] & { quote: string; delta: string }>;

  riskFreeRate(overrides?: CallOverrides): Promise<BigNumber>;

  "riskFreeRate()"(overrides?: CallOverrides): Promise<BigNumber>;

  setVolatilitySkew(
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ],
    flavor: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setVolatilitySkew(int256[7],uint8)"(
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ],
    flavor: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  sqrt(x: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  "sqrt(uint256)"(
    x: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  stddev(
    numbers: BigNumberish[],
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "stddev(uint256[])"(
    numbers: BigNumberish[],
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  strikeAllocated(overrides?: CallOverrides): Promise<BigNumber>;

  "strikeAllocated()"(overrides?: CallOverrides): Promise<BigNumber>;

  strikeAsset(overrides?: CallOverrides): Promise<string>;

  "strikeAsset()"(overrides?: CallOverrides): Promise<string>;

  symbol(overrides?: CallOverrides): Promise<string>;

  "symbol()"(overrides?: CallOverrides): Promise<string>;

  totalAmountCall(overrides?: CallOverrides): Promise<string>;

  "totalAmountCall()"(overrides?: CallOverrides): Promise<string>;

  totalAmountPut(overrides?: CallOverrides): Promise<string>;

  "totalAmountPut()"(overrides?: CallOverrides): Promise<string>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  "totalSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

  transfer(
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "transfer(address,uint256)"(
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  transferFrom(
    sender: string,
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "transferFrom(address,address,uint256)"(
    sender: string,
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "transferOwnership(address)"(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  underlyingAllocated(overrides?: CallOverrides): Promise<BigNumber>;

  "underlyingAllocated()"(overrides?: CallOverrides): Promise<BigNumber>;

  underlyingAsset(overrides?: CallOverrides): Promise<string>;

  "underlyingAsset()"(overrides?: CallOverrides): Promise<string>;

  weightedStrikeCall(overrides?: CallOverrides): Promise<string>;

  "weightedStrikeCall()"(overrides?: CallOverrides): Promise<string>;

  weightedStrikePut(overrides?: CallOverrides): Promise<string>;

  "weightedStrikePut()"(overrides?: CallOverrides): Promise<string>;

  weightedTimeCall(overrides?: CallOverrides): Promise<string>;

  "weightedTimeCall()"(overrides?: CallOverrides): Promise<string>;

  weightedTimePut(overrides?: CallOverrides): Promise<string>;

  "weightedTimePut()"(overrides?: CallOverrides): Promise<string>;

  writeOption(
    seriesAddress: string,
    amount: BigNumberish,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  "writeOption(address,uint256)"(
    seriesAddress: string,
    amount: BigNumberish,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  callStatic: {
    addLiquidity(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "addLiquidity(uint256)"(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "allowance(address,address)"(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "approve(address,uint256)"(
      spender: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    "balanceOf(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    blackScholesCalc(
      price: BytesLike,
      strike: BytesLike,
      time: BytesLike,
      vol: BytesLike,
      rfr: BytesLike,
      flavor: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "blackScholesCalc(bytes16,bytes16,bytes16,bytes16,bytes16,uint8)"(
      price: BytesLike,
      strike: BytesLike,
      time: BytesLike,
      vol: BytesLike,
      rfr: BytesLike,
      flavor: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    blackScholesCalcGreeks(
      price: BytesLike,
      strike: BytesLike,
      time: BytesLike,
      vol: BytesLike,
      rfr: BytesLike,
      flavor: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string, string] & { quote: string; delta: string }>;

    "blackScholesCalcGreeks(bytes16,bytes16,bytes16,bytes16,bytes16,uint8)"(
      price: BytesLike,
      strike: BytesLike,
      time: BytesLike,
      vol: BytesLike,
      rfr: BytesLike,
      flavor: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string, string] & { quote: string; delta: string }>;

    blackScholesEstimate(
      _vol: BigNumberish,
      _underlying: BigNumberish,
      _time: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "blackScholesEstimate(uint256,uint256,uint256)"(
      _vol: BigNumberish,
      _underlying: BigNumberish,
      _time: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    callsVolatilitySkew(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "callsVolatilitySkew(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    decimals(overrides?: CallOverrides): Promise<number>;

    "decimals()"(overrides?: CallOverrides): Promise<number>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "decreaseAllowance(address,uint256)"(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    getDelta(
      price: BigNumberish,
      strike: BigNumberish,
      expiration: BigNumberish,
      vol: BigNumberish,
      rfr: BigNumberish,
      flavor: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "getDelta(uint256,uint256,uint256,uint256,uint256,uint8)"(
      price: BigNumberish,
      strike: BigNumberish,
      expiration: BigNumberish,
      vol: BigNumberish,
      rfr: BigNumberish,
      flavor: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getDeltaWei(
      price: BigNumberish,
      strike: BigNumberish,
      expiration: BigNumberish,
      vol: BigNumberish,
      rfr: BigNumberish,
      flavor: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getDeltaWei(uint256,uint256,uint256,uint256,uint256,uint8)"(
      price: BigNumberish,
      strike: BigNumberish,
      expiration: BigNumberish,
      vol: BigNumberish,
      rfr: BigNumberish,
      flavor: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPortfolioDelta(
      underlyingPrice: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "getPortfolioDelta(uint256)"(
      underlyingPrice: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getVolatilitySkew(
      flavor: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string, string, string, string, string, string, string]>;

    "getVolatilitySkew(uint8)"(
      flavor: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string, string, string, string, string, string, string]>;

    impliedVolatility(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "impliedVolatility(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "increaseAllowance(address,uint256)"(
      spender: string,
      addedValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    issueAndWriteOption(
      optionSeries: {
        expiration: BigNumberish;
        flavor: BigNumberish;
        strike: BigNumberish;
        underlying: string;
        strikeAsset: string;
      },
      amount: BigNumberish,
      destroy: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string] & { optionAmount: BigNumber; series: string }
    >;

    "issueAndWriteOption(tuple,uint256,address)"(
      optionSeries: {
        expiration: BigNumberish;
        flavor: BigNumberish;
        strike: BigNumberish;
        underlying: string;
        strikeAsset: string;
      },
      amount: BigNumberish,
      destroy: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string] & { optionAmount: BigNumber; series: string }
    >;

    name(overrides?: CallOverrides): Promise<string>;

    "name()"(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    "owner()"(overrides?: CallOverrides): Promise<string>;

    protocol(overrides?: CallOverrides): Promise<string>;

    "protocol()"(overrides?: CallOverrides): Promise<string>;

    putsVolatilitySkew(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "putsVolatilitySkew(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    quotePrice(
      optionSeries: {
        expiration: BigNumberish;
        flavor: BigNumberish;
        strike: BigNumberish;
        underlying: string;
        strikeAsset: string;
      },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "quotePrice(tuple)"(
      optionSeries: {
        expiration: BigNumberish;
        flavor: BigNumberish;
        strike: BigNumberish;
        underlying: string;
        strikeAsset: string;
      },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    quotePriceGreeks(
      optionSeries: {
        expiration: BigNumberish;
        flavor: BigNumberish;
        strike: BigNumberish;
        underlying: string;
        strikeAsset: string;
      },
      overrides?: CallOverrides
    ): Promise<
      [string, string, BigNumber] & {
        quote: string;
        delta: string;
        underlyingPrice: BigNumber;
      }
    >;

    "quotePriceGreeks(tuple)"(
      optionSeries: {
        expiration: BigNumberish;
        flavor: BigNumberish;
        strike: BigNumberish;
        underlying: string;
        strikeAsset: string;
      },
      overrides?: CallOverrides
    ): Promise<
      [string, string, BigNumber] & {
        quote: string;
        delta: string;
        underlyingPrice: BigNumber;
      }
    >;

    quotePriceWithUtilization(
      optionSeries: {
        expiration: BigNumberish;
        flavor: BigNumberish;
        strike: BigNumberish;
        underlying: string;
        strikeAsset: string;
      },
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "quotePriceWithUtilization(tuple,uint256)"(
      optionSeries: {
        expiration: BigNumberish;
        flavor: BigNumberish;
        strike: BigNumberish;
        underlying: string;
        strikeAsset: string;
      },
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    quotePriceWithUtilizationGreeks(
      optionSeries: {
        expiration: BigNumberish;
        flavor: BigNumberish;
        strike: BigNumberish;
        underlying: string;
        strikeAsset: string;
      },
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string, string] & { quote: string; delta: string }>;

    "quotePriceWithUtilizationGreeks(tuple,uint256)"(
      optionSeries: {
        expiration: BigNumberish;
        flavor: BigNumberish;
        strike: BigNumberish;
        underlying: string;
        strikeAsset: string;
      },
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string, string] & { quote: string; delta: string }>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    "renounceOwnership()"(overrides?: CallOverrides): Promise<void>;

    retBasedBlackScholesEstimate(
      _numbers: BigNumberish[],
      _underlying: BigNumberish,
      _time: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "retBasedBlackScholesEstimate(uint256[],uint256,uint256)"(
      _numbers: BigNumberish[],
      _underlying: BigNumberish,
      _time: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    retBlackScholesCalc(
      price: BigNumberish,
      strike: BigNumberish,
      expiration: BigNumberish,
      vol: BigNumberish,
      rfr: BigNumberish,
      flavor: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "retBlackScholesCalc(uint256,uint256,uint256,uint256,uint256,uint8)"(
      price: BigNumberish,
      strike: BigNumberish,
      expiration: BigNumberish,
      vol: BigNumberish,
      rfr: BigNumberish,
      flavor: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    retBlackScholesCalcGreeks(
      price: BigNumberish,
      strike: BigNumberish,
      expiration: BigNumberish,
      vol: BigNumberish,
      rfr: BigNumberish,
      flavor: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string, string] & { quote: string; delta: string }>;

    "retBlackScholesCalcGreeks(uint256,uint256,uint256,uint256,uint256,uint8)"(
      price: BigNumberish,
      strike: BigNumberish,
      expiration: BigNumberish,
      vol: BigNumberish,
      rfr: BigNumberish,
      flavor: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string, string] & { quote: string; delta: string }>;

    riskFreeRate(overrides?: CallOverrides): Promise<BigNumber>;

    "riskFreeRate()"(overrides?: CallOverrides): Promise<BigNumber>;

    setVolatilitySkew(
      values: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      flavor: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "setVolatilitySkew(int256[7],uint8)"(
      values: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      flavor: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    sqrt(x: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    "sqrt(uint256)"(
      x: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    stddev(
      numbers: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "stddev(uint256[])"(
      numbers: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    strikeAllocated(overrides?: CallOverrides): Promise<BigNumber>;

    "strikeAllocated()"(overrides?: CallOverrides): Promise<BigNumber>;

    strikeAsset(overrides?: CallOverrides): Promise<string>;

    "strikeAsset()"(overrides?: CallOverrides): Promise<string>;

    symbol(overrides?: CallOverrides): Promise<string>;

    "symbol()"(overrides?: CallOverrides): Promise<string>;

    totalAmountCall(overrides?: CallOverrides): Promise<string>;

    "totalAmountCall()"(overrides?: CallOverrides): Promise<string>;

    totalAmountPut(overrides?: CallOverrides): Promise<string>;

    "totalAmountPut()"(overrides?: CallOverrides): Promise<string>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    "totalSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "transfer(address,uint256)"(
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "transferFrom(address,address,uint256)"(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    underlyingAllocated(overrides?: CallOverrides): Promise<BigNumber>;

    "underlyingAllocated()"(overrides?: CallOverrides): Promise<BigNumber>;

    underlyingAsset(overrides?: CallOverrides): Promise<string>;

    "underlyingAsset()"(overrides?: CallOverrides): Promise<string>;

    weightedStrikeCall(overrides?: CallOverrides): Promise<string>;

    "weightedStrikeCall()"(overrides?: CallOverrides): Promise<string>;

    weightedStrikePut(overrides?: CallOverrides): Promise<string>;

    "weightedStrikePut()"(overrides?: CallOverrides): Promise<string>;

    weightedTimeCall(overrides?: CallOverrides): Promise<string>;

    "weightedTimeCall()"(overrides?: CallOverrides): Promise<string>;

    weightedTimePut(overrides?: CallOverrides): Promise<string>;

    "weightedTimePut()"(overrides?: CallOverrides): Promise<string>;

    writeOption(
      seriesAddress: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "writeOption(address,uint256)"(
      seriesAddress: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {
    Approval(
      owner: string | null,
      spender: string | null,
      value: null
    ): EventFilter;

    ImpliedVolatilityUpdated(underlying: null, iv: null): EventFilter;

    LiquidityAdded(amount: null): EventFilter;

    OwnershipTransferred(
      previousOwner: string | null,
      newOwner: string | null
    ): EventFilter;

    Transfer(from: string | null, to: string | null, value: null): EventFilter;

    UnderlyingAdded(underlying: null): EventFilter;

    WriteOption(
      series: null,
      amount: null,
      premium: null,
      escrow: null,
      buyer: null
    ): EventFilter;
  };

  estimateGas: {
    addLiquidity(
      amount: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    "addLiquidity(uint256)"(
      amount: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "allowance(address,address)"(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "approve(address,uint256)"(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    "balanceOf(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    blackScholesCalc(
      price: BytesLike,
      strike: BytesLike,
      time: BytesLike,
      vol: BytesLike,
      rfr: BytesLike,
      flavor: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "blackScholesCalc(bytes16,bytes16,bytes16,bytes16,bytes16,uint8)"(
      price: BytesLike,
      strike: BytesLike,
      time: BytesLike,
      vol: BytesLike,
      rfr: BytesLike,
      flavor: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    blackScholesCalcGreeks(
      price: BytesLike,
      strike: BytesLike,
      time: BytesLike,
      vol: BytesLike,
      rfr: BytesLike,
      flavor: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "blackScholesCalcGreeks(bytes16,bytes16,bytes16,bytes16,bytes16,uint8)"(
      price: BytesLike,
      strike: BytesLike,
      time: BytesLike,
      vol: BytesLike,
      rfr: BytesLike,
      flavor: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    blackScholesEstimate(
      _vol: BigNumberish,
      _underlying: BigNumberish,
      _time: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "blackScholesEstimate(uint256,uint256,uint256)"(
      _vol: BigNumberish,
      _underlying: BigNumberish,
      _time: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    callsVolatilitySkew(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "callsVolatilitySkew(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<BigNumber>;

    "decimals()"(overrides?: CallOverrides): Promise<BigNumber>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "decreaseAllowance(address,uint256)"(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    getDelta(
      price: BigNumberish,
      strike: BigNumberish,
      expiration: BigNumberish,
      vol: BigNumberish,
      rfr: BigNumberish,
      flavor: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getDelta(uint256,uint256,uint256,uint256,uint256,uint8)"(
      price: BigNumberish,
      strike: BigNumberish,
      expiration: BigNumberish,
      vol: BigNumberish,
      rfr: BigNumberish,
      flavor: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDeltaWei(
      price: BigNumberish,
      strike: BigNumberish,
      expiration: BigNumberish,
      vol: BigNumberish,
      rfr: BigNumberish,
      flavor: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getDeltaWei(uint256,uint256,uint256,uint256,uint256,uint8)"(
      price: BigNumberish,
      strike: BigNumberish,
      expiration: BigNumberish,
      vol: BigNumberish,
      rfr: BigNumberish,
      flavor: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPortfolioDelta(
      underlyingPrice: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getPortfolioDelta(uint256)"(
      underlyingPrice: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getVolatilitySkew(
      flavor: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getVolatilitySkew(uint8)"(
      flavor: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    impliedVolatility(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "impliedVolatility(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "increaseAllowance(address,uint256)"(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    issueAndWriteOption(
      optionSeries: {
        expiration: BigNumberish;
        flavor: BigNumberish;
        strike: BigNumberish;
        underlying: string;
        strikeAsset: string;
      },
      amount: BigNumberish,
      destroy: string,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    "issueAndWriteOption(tuple,uint256,address)"(
      optionSeries: {
        expiration: BigNumberish;
        flavor: BigNumberish;
        strike: BigNumberish;
        underlying: string;
        strikeAsset: string;
      },
      amount: BigNumberish,
      destroy: string,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    "name()"(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    protocol(overrides?: CallOverrides): Promise<BigNumber>;

    "protocol()"(overrides?: CallOverrides): Promise<BigNumber>;

    putsVolatilitySkew(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "putsVolatilitySkew(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    quotePrice(
      optionSeries: {
        expiration: BigNumberish;
        flavor: BigNumberish;
        strike: BigNumberish;
        underlying: string;
        strikeAsset: string;
      },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "quotePrice(tuple)"(
      optionSeries: {
        expiration: BigNumberish;
        flavor: BigNumberish;
        strike: BigNumberish;
        underlying: string;
        strikeAsset: string;
      },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    quotePriceGreeks(
      optionSeries: {
        expiration: BigNumberish;
        flavor: BigNumberish;
        strike: BigNumberish;
        underlying: string;
        strikeAsset: string;
      },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "quotePriceGreeks(tuple)"(
      optionSeries: {
        expiration: BigNumberish;
        flavor: BigNumberish;
        strike: BigNumberish;
        underlying: string;
        strikeAsset: string;
      },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    quotePriceWithUtilization(
      optionSeries: {
        expiration: BigNumberish;
        flavor: BigNumberish;
        strike: BigNumberish;
        underlying: string;
        strikeAsset: string;
      },
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "quotePriceWithUtilization(tuple,uint256)"(
      optionSeries: {
        expiration: BigNumberish;
        flavor: BigNumberish;
        strike: BigNumberish;
        underlying: string;
        strikeAsset: string;
      },
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    quotePriceWithUtilizationGreeks(
      optionSeries: {
        expiration: BigNumberish;
        flavor: BigNumberish;
        strike: BigNumberish;
        underlying: string;
        strikeAsset: string;
      },
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "quotePriceWithUtilizationGreeks(tuple,uint256)"(
      optionSeries: {
        expiration: BigNumberish;
        flavor: BigNumberish;
        strike: BigNumberish;
        underlying: string;
        strikeAsset: string;
      },
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    renounceOwnership(overrides?: Overrides): Promise<BigNumber>;

    "renounceOwnership()"(overrides?: Overrides): Promise<BigNumber>;

    retBasedBlackScholesEstimate(
      _numbers: BigNumberish[],
      _underlying: BigNumberish,
      _time: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "retBasedBlackScholesEstimate(uint256[],uint256,uint256)"(
      _numbers: BigNumberish[],
      _underlying: BigNumberish,
      _time: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    retBlackScholesCalc(
      price: BigNumberish,
      strike: BigNumberish,
      expiration: BigNumberish,
      vol: BigNumberish,
      rfr: BigNumberish,
      flavor: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "retBlackScholesCalc(uint256,uint256,uint256,uint256,uint256,uint8)"(
      price: BigNumberish,
      strike: BigNumberish,
      expiration: BigNumberish,
      vol: BigNumberish,
      rfr: BigNumberish,
      flavor: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    retBlackScholesCalcGreeks(
      price: BigNumberish,
      strike: BigNumberish,
      expiration: BigNumberish,
      vol: BigNumberish,
      rfr: BigNumberish,
      flavor: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "retBlackScholesCalcGreeks(uint256,uint256,uint256,uint256,uint256,uint8)"(
      price: BigNumberish,
      strike: BigNumberish,
      expiration: BigNumberish,
      vol: BigNumberish,
      rfr: BigNumberish,
      flavor: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    riskFreeRate(overrides?: CallOverrides): Promise<BigNumber>;

    "riskFreeRate()"(overrides?: CallOverrides): Promise<BigNumber>;

    setVolatilitySkew(
      values: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      flavor: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setVolatilitySkew(int256[7],uint8)"(
      values: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      flavor: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    sqrt(x: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    "sqrt(uint256)"(
      x: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    stddev(
      numbers: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "stddev(uint256[])"(
      numbers: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    strikeAllocated(overrides?: CallOverrides): Promise<BigNumber>;

    "strikeAllocated()"(overrides?: CallOverrides): Promise<BigNumber>;

    strikeAsset(overrides?: CallOverrides): Promise<BigNumber>;

    "strikeAsset()"(overrides?: CallOverrides): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    "symbol()"(overrides?: CallOverrides): Promise<BigNumber>;

    totalAmountCall(overrides?: CallOverrides): Promise<BigNumber>;

    "totalAmountCall()"(overrides?: CallOverrides): Promise<BigNumber>;

    totalAmountPut(overrides?: CallOverrides): Promise<BigNumber>;

    "totalAmountPut()"(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    "totalSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "transfer(address,uint256)"(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "transferFrom(address,address,uint256)"(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    underlyingAllocated(overrides?: CallOverrides): Promise<BigNumber>;

    "underlyingAllocated()"(overrides?: CallOverrides): Promise<BigNumber>;

    underlyingAsset(overrides?: CallOverrides): Promise<BigNumber>;

    "underlyingAsset()"(overrides?: CallOverrides): Promise<BigNumber>;

    weightedStrikeCall(overrides?: CallOverrides): Promise<BigNumber>;

    "weightedStrikeCall()"(overrides?: CallOverrides): Promise<BigNumber>;

    weightedStrikePut(overrides?: CallOverrides): Promise<BigNumber>;

    "weightedStrikePut()"(overrides?: CallOverrides): Promise<BigNumber>;

    weightedTimeCall(overrides?: CallOverrides): Promise<BigNumber>;

    "weightedTimeCall()"(overrides?: CallOverrides): Promise<BigNumber>;

    weightedTimePut(overrides?: CallOverrides): Promise<BigNumber>;

    "weightedTimePut()"(overrides?: CallOverrides): Promise<BigNumber>;

    writeOption(
      seriesAddress: string,
      amount: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    "writeOption(address,uint256)"(
      seriesAddress: string,
      amount: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addLiquidity(
      amount: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    "addLiquidity(uint256)"(
      amount: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "allowance(address,address)"(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "approve(address,uint256)"(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    balanceOf(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "balanceOf(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    blackScholesCalc(
      price: BytesLike,
      strike: BytesLike,
      time: BytesLike,
      vol: BytesLike,
      rfr: BytesLike,
      flavor: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "blackScholesCalc(bytes16,bytes16,bytes16,bytes16,bytes16,uint8)"(
      price: BytesLike,
      strike: BytesLike,
      time: BytesLike,
      vol: BytesLike,
      rfr: BytesLike,
      flavor: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    blackScholesCalcGreeks(
      price: BytesLike,
      strike: BytesLike,
      time: BytesLike,
      vol: BytesLike,
      rfr: BytesLike,
      flavor: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "blackScholesCalcGreeks(bytes16,bytes16,bytes16,bytes16,bytes16,uint8)"(
      price: BytesLike,
      strike: BytesLike,
      time: BytesLike,
      vol: BytesLike,
      rfr: BytesLike,
      flavor: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    blackScholesEstimate(
      _vol: BigNumberish,
      _underlying: BigNumberish,
      _time: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "blackScholesEstimate(uint256,uint256,uint256)"(
      _vol: BigNumberish,
      _underlying: BigNumberish,
      _time: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    callsVolatilitySkew(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "callsVolatilitySkew(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "decimals()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "decreaseAllowance(address,uint256)"(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    getDelta(
      price: BigNumberish,
      strike: BigNumberish,
      expiration: BigNumberish,
      vol: BigNumberish,
      rfr: BigNumberish,
      flavor: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getDelta(uint256,uint256,uint256,uint256,uint256,uint8)"(
      price: BigNumberish,
      strike: BigNumberish,
      expiration: BigNumberish,
      vol: BigNumberish,
      rfr: BigNumberish,
      flavor: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDeltaWei(
      price: BigNumberish,
      strike: BigNumberish,
      expiration: BigNumberish,
      vol: BigNumberish,
      rfr: BigNumberish,
      flavor: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getDeltaWei(uint256,uint256,uint256,uint256,uint256,uint8)"(
      price: BigNumberish,
      strike: BigNumberish,
      expiration: BigNumberish,
      vol: BigNumberish,
      rfr: BigNumberish,
      flavor: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPortfolioDelta(
      underlyingPrice: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getPortfolioDelta(uint256)"(
      underlyingPrice: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getVolatilitySkew(
      flavor: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getVolatilitySkew(uint8)"(
      flavor: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    impliedVolatility(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "impliedVolatility(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "increaseAllowance(address,uint256)"(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    issueAndWriteOption(
      optionSeries: {
        expiration: BigNumberish;
        flavor: BigNumberish;
        strike: BigNumberish;
        underlying: string;
        strikeAsset: string;
      },
      amount: BigNumberish,
      destroy: string,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    "issueAndWriteOption(tuple,uint256,address)"(
      optionSeries: {
        expiration: BigNumberish;
        flavor: BigNumberish;
        strike: BigNumberish;
        underlying: string;
        strikeAsset: string;
      },
      amount: BigNumberish,
      destroy: string,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "name()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    protocol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "protocol()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    putsVolatilitySkew(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "putsVolatilitySkew(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    quotePrice(
      optionSeries: {
        expiration: BigNumberish;
        flavor: BigNumberish;
        strike: BigNumberish;
        underlying: string;
        strikeAsset: string;
      },
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "quotePrice(tuple)"(
      optionSeries: {
        expiration: BigNumberish;
        flavor: BigNumberish;
        strike: BigNumberish;
        underlying: string;
        strikeAsset: string;
      },
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    quotePriceGreeks(
      optionSeries: {
        expiration: BigNumberish;
        flavor: BigNumberish;
        strike: BigNumberish;
        underlying: string;
        strikeAsset: string;
      },
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "quotePriceGreeks(tuple)"(
      optionSeries: {
        expiration: BigNumberish;
        flavor: BigNumberish;
        strike: BigNumberish;
        underlying: string;
        strikeAsset: string;
      },
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    quotePriceWithUtilization(
      optionSeries: {
        expiration: BigNumberish;
        flavor: BigNumberish;
        strike: BigNumberish;
        underlying: string;
        strikeAsset: string;
      },
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "quotePriceWithUtilization(tuple,uint256)"(
      optionSeries: {
        expiration: BigNumberish;
        flavor: BigNumberish;
        strike: BigNumberish;
        underlying: string;
        strikeAsset: string;
      },
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    quotePriceWithUtilizationGreeks(
      optionSeries: {
        expiration: BigNumberish;
        flavor: BigNumberish;
        strike: BigNumberish;
        underlying: string;
        strikeAsset: string;
      },
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "quotePriceWithUtilizationGreeks(tuple,uint256)"(
      optionSeries: {
        expiration: BigNumberish;
        flavor: BigNumberish;
        strike: BigNumberish;
        underlying: string;
        strikeAsset: string;
      },
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    renounceOwnership(overrides?: Overrides): Promise<PopulatedTransaction>;

    "renounceOwnership()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    retBasedBlackScholesEstimate(
      _numbers: BigNumberish[],
      _underlying: BigNumberish,
      _time: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "retBasedBlackScholesEstimate(uint256[],uint256,uint256)"(
      _numbers: BigNumberish[],
      _underlying: BigNumberish,
      _time: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    retBlackScholesCalc(
      price: BigNumberish,
      strike: BigNumberish,
      expiration: BigNumberish,
      vol: BigNumberish,
      rfr: BigNumberish,
      flavor: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "retBlackScholesCalc(uint256,uint256,uint256,uint256,uint256,uint8)"(
      price: BigNumberish,
      strike: BigNumberish,
      expiration: BigNumberish,
      vol: BigNumberish,
      rfr: BigNumberish,
      flavor: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    retBlackScholesCalcGreeks(
      price: BigNumberish,
      strike: BigNumberish,
      expiration: BigNumberish,
      vol: BigNumberish,
      rfr: BigNumberish,
      flavor: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "retBlackScholesCalcGreeks(uint256,uint256,uint256,uint256,uint256,uint8)"(
      price: BigNumberish,
      strike: BigNumberish,
      expiration: BigNumberish,
      vol: BigNumberish,
      rfr: BigNumberish,
      flavor: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    riskFreeRate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "riskFreeRate()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setVolatilitySkew(
      values: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      flavor: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setVolatilitySkew(int256[7],uint8)"(
      values: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      flavor: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    sqrt(
      x: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "sqrt(uint256)"(
      x: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    stddev(
      numbers: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "stddev(uint256[])"(
      numbers: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    strikeAllocated(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "strikeAllocated()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    strikeAsset(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "strikeAsset()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "symbol()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalAmountCall(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "totalAmountCall()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalAmountPut(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "totalAmountPut()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "totalSupply()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "transfer(address,uint256)"(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "transferFrom(address,address,uint256)"(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    underlyingAllocated(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "underlyingAllocated()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    underlyingAsset(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "underlyingAsset()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    weightedStrikeCall(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "weightedStrikeCall()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    weightedStrikePut(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "weightedStrikePut()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    weightedTimeCall(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "weightedTimeCall()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    weightedTimePut(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "weightedTimePut()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    writeOption(
      seriesAddress: string,
      amount: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    "writeOption(address,uint256)"(
      seriesAddress: string,
      amount: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;
  };
}
