/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import { Contract, ContractFactory, Overrides } from "@ethersproject/contracts";

import type { MockUniswapFactory } from "../MockUniswapFactory";

export class MockUniswapFactory__factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(overrides?: Overrides): Promise<MockUniswapFactory> {
    return super.deploy(overrides || {}) as Promise<MockUniswapFactory>;
  }
  getDeployTransaction(overrides?: Overrides): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): MockUniswapFactory {
    return super.attach(address) as MockUniswapFactory;
  }
  connect(signer: Signer): MockUniswapFactory__factory {
    return super.connect(signer) as MockUniswapFactory__factory;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MockUniswapFactory {
    return new Contract(address, _abi, signerOrProvider) as MockUniswapFactory;
  }
}

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "exchange_to_token",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
    ],
    name: "getExchange",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "token_to_exchange",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b5061015e806100206000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c806303ef876f1461004657806306f2bf62146100885780634acc5382146100ae575b600080fd5b61006c6004803603602081101561005c57600080fd5b50356001600160a01b03166100d4565b604080516001600160a01b039092168252519081900360200190f35b61006c6004803603602081101561009e57600080fd5b50356001600160a01b03166100ef565b61006c600480360360208110156100c457600080fd5b50356001600160a01b031661010d565b6001602052600090815260409020546001600160a01b031681565b6001600160a01b039081166000908152602081905260409020541690565b6000602081905290815260409020546001600160a01b03168156fea2646970667358221220df918c4ae54ad1cd0d620b1650d83a21efde2db3c0007ad63d86e8faa328301564736f6c63430006080033";
