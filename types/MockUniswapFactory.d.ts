/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface MockUniswapFactoryInterface extends ethers.utils.Interface {
  functions: {
    "exchange_to_token(address)": FunctionFragment;
    "getExchange(address)": FunctionFragment;
    "token_to_exchange(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "exchange_to_token",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "getExchange", values: [string]): string;
  encodeFunctionData(
    functionFragment: "token_to_exchange",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "exchange_to_token",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getExchange",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "token_to_exchange",
    data: BytesLike
  ): Result;

  events: {};
}

export class MockUniswapFactory extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: MockUniswapFactoryInterface;

  functions: {
    exchange_to_token(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "exchange_to_token(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getExchange(token: string, overrides?: CallOverrides): Promise<[string]>;

    "getExchange(address)"(
      token: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    token_to_exchange(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "token_to_exchange(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[string]>;
  };

  exchange_to_token(arg0: string, overrides?: CallOverrides): Promise<string>;

  "exchange_to_token(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<string>;

  getExchange(token: string, overrides?: CallOverrides): Promise<string>;

  "getExchange(address)"(
    token: string,
    overrides?: CallOverrides
  ): Promise<string>;

  token_to_exchange(arg0: string, overrides?: CallOverrides): Promise<string>;

  "token_to_exchange(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<string>;

  callStatic: {
    exchange_to_token(arg0: string, overrides?: CallOverrides): Promise<string>;

    "exchange_to_token(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<string>;

    getExchange(token: string, overrides?: CallOverrides): Promise<string>;

    "getExchange(address)"(
      token: string,
      overrides?: CallOverrides
    ): Promise<string>;

    token_to_exchange(arg0: string, overrides?: CallOverrides): Promise<string>;

    "token_to_exchange(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<string>;
  };

  filters: {};

  estimateGas: {
    exchange_to_token(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "exchange_to_token(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getExchange(token: string, overrides?: CallOverrides): Promise<BigNumber>;

    "getExchange(address)"(
      token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    token_to_exchange(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "token_to_exchange(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    exchange_to_token(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "exchange_to_token(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getExchange(
      token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getExchange(address)"(
      token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    token_to_exchange(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "token_to_exchange(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
