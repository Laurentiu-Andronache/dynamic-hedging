/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface PriceFeedInterface extends ethers.utils.Interface {
  functions: {
    "addPriceFeed(address,address,address)": FunctionFragment;
    "getNormalizedRate(address,address)": FunctionFragment;
    "getPriceQuote(address,address,uint256)": FunctionFragment;
    "getRate(address,address)": FunctionFragment;
    "getV2PriceQuote(address,address,uint256)": FunctionFragment;
    "getV2PriceQuoteSlippage(address,address,uint256)": FunctionFragment;
    "owner()": FunctionFragment;
    "priceFeeds(address,address)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "uniswapRouter()": FunctionFragment;
    "uniswapV2Factory()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "addPriceFeed",
    values: [string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getNormalizedRate",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getPriceQuote",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRate",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getV2PriceQuote",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getV2PriceQuoteSlippage",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "priceFeeds",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "uniswapRouter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "uniswapV2Factory",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "addPriceFeed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNormalizedRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPriceQuote",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getRate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getV2PriceQuote",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getV2PriceQuoteSlippage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "priceFeeds", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "uniswapRouter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "uniswapV2Factory",
    data: BytesLike
  ): Result;

  events: {
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export class PriceFeed extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: PriceFeedInterface;

  functions: {
    addPriceFeed(
      underlying: string,
      strike: string,
      feed: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "addPriceFeed(address,address,address)"(
      underlying: string,
      strike: string,
      feed: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    getNormalizedRate(
      underlying: string,
      strike: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "getNormalizedRate(address,address)"(
      underlying: string,
      strike: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getPriceQuote(
      fromToken: string,
      toToken: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "getPriceQuote(address,address,uint256)"(
      fromToken: string,
      toToken: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getRate(
      underlying: string,
      strike: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "getRate(address,address)"(
      underlying: string,
      strike: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getV2PriceQuote(
      fromToken: string,
      toToken: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "getV2PriceQuote(address,address,uint256)"(
      fromToken: string,
      toToken: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getV2PriceQuoteSlippage(
      fromToken: string,
      toToken: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "getV2PriceQuoteSlippage(address,address,uint256)"(
      fromToken: string,
      toToken: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    "owner()"(overrides?: CallOverrides): Promise<[string]>;

    priceFeeds(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "priceFeeds(address,address)"(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

    "renounceOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    uniswapRouter(overrides?: CallOverrides): Promise<[string]>;

    "uniswapRouter()"(overrides?: CallOverrides): Promise<[string]>;

    uniswapV2Factory(overrides?: CallOverrides): Promise<[string]>;

    "uniswapV2Factory()"(overrides?: CallOverrides): Promise<[string]>;
  };

  addPriceFeed(
    underlying: string,
    strike: string,
    feed: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "addPriceFeed(address,address,address)"(
    underlying: string,
    strike: string,
    feed: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  getNormalizedRate(
    underlying: string,
    strike: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getNormalizedRate(address,address)"(
    underlying: string,
    strike: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getPriceQuote(
    fromToken: string,
    toToken: string,
    amount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getPriceQuote(address,address,uint256)"(
    fromToken: string,
    toToken: string,
    amount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getRate(
    underlying: string,
    strike: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getRate(address,address)"(
    underlying: string,
    strike: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getV2PriceQuote(
    fromToken: string,
    toToken: string,
    amount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getV2PriceQuote(address,address,uint256)"(
    fromToken: string,
    toToken: string,
    amount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getV2PriceQuoteSlippage(
    fromToken: string,
    toToken: string,
    amount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getV2PriceQuoteSlippage(address,address,uint256)"(
    fromToken: string,
    toToken: string,
    amount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  "owner()"(overrides?: CallOverrides): Promise<string>;

  priceFeeds(
    arg0: string,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<string>;

  "priceFeeds(address,address)"(
    arg0: string,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<string>;

  renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

  "renounceOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "transferOwnership(address)"(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  uniswapRouter(overrides?: CallOverrides): Promise<string>;

  "uniswapRouter()"(overrides?: CallOverrides): Promise<string>;

  uniswapV2Factory(overrides?: CallOverrides): Promise<string>;

  "uniswapV2Factory()"(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    addPriceFeed(
      underlying: string,
      strike: string,
      feed: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "addPriceFeed(address,address,address)"(
      underlying: string,
      strike: string,
      feed: string,
      overrides?: CallOverrides
    ): Promise<void>;

    getNormalizedRate(
      underlying: string,
      strike: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getNormalizedRate(address,address)"(
      underlying: string,
      strike: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPriceQuote(
      fromToken: string,
      toToken: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getPriceQuote(address,address,uint256)"(
      fromToken: string,
      toToken: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRate(
      underlying: string,
      strike: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getRate(address,address)"(
      underlying: string,
      strike: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getV2PriceQuote(
      fromToken: string,
      toToken: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getV2PriceQuote(address,address,uint256)"(
      fromToken: string,
      toToken: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getV2PriceQuoteSlippage(
      fromToken: string,
      toToken: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getV2PriceQuoteSlippage(address,address,uint256)"(
      fromToken: string,
      toToken: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    "owner()"(overrides?: CallOverrides): Promise<string>;

    priceFeeds(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<string>;

    "priceFeeds(address,address)"(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    "renounceOwnership()"(overrides?: CallOverrides): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    uniswapRouter(overrides?: CallOverrides): Promise<string>;

    "uniswapRouter()"(overrides?: CallOverrides): Promise<string>;

    uniswapV2Factory(overrides?: CallOverrides): Promise<string>;

    "uniswapV2Factory()"(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    OwnershipTransferred(
      previousOwner: string | null,
      newOwner: string | null
    ): EventFilter;
  };

  estimateGas: {
    addPriceFeed(
      underlying: string,
      strike: string,
      feed: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "addPriceFeed(address,address,address)"(
      underlying: string,
      strike: string,
      feed: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    getNormalizedRate(
      underlying: string,
      strike: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getNormalizedRate(address,address)"(
      underlying: string,
      strike: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPriceQuote(
      fromToken: string,
      toToken: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getPriceQuote(address,address,uint256)"(
      fromToken: string,
      toToken: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRate(
      underlying: string,
      strike: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getRate(address,address)"(
      underlying: string,
      strike: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getV2PriceQuote(
      fromToken: string,
      toToken: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getV2PriceQuote(address,address,uint256)"(
      fromToken: string,
      toToken: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getV2PriceQuoteSlippage(
      fromToken: string,
      toToken: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getV2PriceQuoteSlippage(address,address,uint256)"(
      fromToken: string,
      toToken: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    priceFeeds(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "priceFeeds(address,address)"(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    renounceOwnership(overrides?: Overrides): Promise<BigNumber>;

    "renounceOwnership()"(overrides?: Overrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    uniswapRouter(overrides?: CallOverrides): Promise<BigNumber>;

    "uniswapRouter()"(overrides?: CallOverrides): Promise<BigNumber>;

    uniswapV2Factory(overrides?: CallOverrides): Promise<BigNumber>;

    "uniswapV2Factory()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    addPriceFeed(
      underlying: string,
      strike: string,
      feed: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "addPriceFeed(address,address,address)"(
      underlying: string,
      strike: string,
      feed: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    getNormalizedRate(
      underlying: string,
      strike: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getNormalizedRate(address,address)"(
      underlying: string,
      strike: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPriceQuote(
      fromToken: string,
      toToken: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getPriceQuote(address,address,uint256)"(
      fromToken: string,
      toToken: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRate(
      underlying: string,
      strike: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getRate(address,address)"(
      underlying: string,
      strike: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getV2PriceQuote(
      fromToken: string,
      toToken: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getV2PriceQuote(address,address,uint256)"(
      fromToken: string,
      toToken: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getV2PriceQuoteSlippage(
      fromToken: string,
      toToken: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getV2PriceQuoteSlippage(address,address,uint256)"(
      fromToken: string,
      toToken: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    priceFeeds(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "priceFeeds(address,address)"(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    renounceOwnership(overrides?: Overrides): Promise<PopulatedTransaction>;

    "renounceOwnership()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    uniswapRouter(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "uniswapRouter()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    uniswapV2Factory(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "uniswapV2Factory()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
