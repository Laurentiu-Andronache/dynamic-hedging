/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface ExchangeInterface extends ethers.utils.Interface {
  functions: {
    "balanceOf(address,address)": FunctionFragment;
    "createOrder(address,uint256,address,uint256,uint256,uint256)": FunctionFragment;
    "depositToken(address,uint256)": FunctionFragment;
    "feeAccount()": FunctionFragment;
    "feeTake()": FunctionFragment;
    "orderFills(address,bytes32)": FunctionFragment;
    "orders(address,bytes32)": FunctionFragment;
    "tokens(address,address)": FunctionFragment;
    "trade(address,uint256,address,uint256,uint256,uint256,address,uint256)": FunctionFragment;
    "withdrawToken(address,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "createOrder",
    values: [
      string,
      BigNumberish,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "depositToken",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "feeAccount",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "feeTake", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "orderFills",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "orders",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "tokens",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "trade",
    values: [
      string,
      BigNumberish,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      string,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawToken",
    values: [string, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "createOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "feeAccount", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "feeTake", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "orderFills", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "orders", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "tokens", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "trade", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawToken",
    data: BytesLike
  ): Result;

  events: {
    "Deposit(address,address,uint256,uint256)": EventFragment;
    "Order(address,uint256,address,uint256,uint256,uint256,address)": EventFragment;
    "Trade(address,uint256,address,uint256,address,address)": EventFragment;
    "Withdraw(address,address,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Deposit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Order"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Trade"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Withdraw"): EventFragment;
}

export class Exchange extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: ExchangeInterface;

  functions: {
    balanceOf(
      token: string,
      user: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "balanceOf(address,address)"(
      token: string,
      user: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    createOrder(
      tokenGet: string,
      amountGet: BigNumberish,
      tokenGive: string,
      amountGive: BigNumberish,
      expires: BigNumberish,
      nonce: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "createOrder(address,uint256,address,uint256,uint256,uint256)"(
      tokenGet: string,
      amountGet: BigNumberish,
      tokenGive: string,
      amountGive: BigNumberish,
      expires: BigNumberish,
      nonce: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    depositToken(
      token: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "depositToken(address,uint256)"(
      token: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    feeAccount(overrides?: CallOverrides): Promise<[string]>;

    "feeAccount()"(overrides?: CallOverrides): Promise<[string]>;

    feeTake(overrides?: CallOverrides): Promise<[BigNumber]>;

    "feeTake()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    orderFills(
      arg0: string,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "orderFills(address,bytes32)"(
      arg0: string,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    orders(
      arg0: string,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "orders(address,bytes32)"(
      arg0: string,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    tokens(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "tokens(address,address)"(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    trade(
      tokenGet: string,
      amountGet: BigNumberish,
      tokenGive: string,
      amountGive: BigNumberish,
      expires: BigNumberish,
      nonce: BigNumberish,
      user: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "trade(address,uint256,address,uint256,uint256,uint256,address,uint256)"(
      tokenGet: string,
      amountGet: BigNumberish,
      tokenGive: string,
      amountGive: BigNumberish,
      expires: BigNumberish,
      nonce: BigNumberish,
      user: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    withdrawToken(
      token: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "withdrawToken(address,uint256)"(
      token: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  balanceOf(
    token: string,
    user: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "balanceOf(address,address)"(
    token: string,
    user: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  createOrder(
    tokenGet: string,
    amountGet: BigNumberish,
    tokenGive: string,
    amountGive: BigNumberish,
    expires: BigNumberish,
    nonce: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "createOrder(address,uint256,address,uint256,uint256,uint256)"(
    tokenGet: string,
    amountGet: BigNumberish,
    tokenGive: string,
    amountGive: BigNumberish,
    expires: BigNumberish,
    nonce: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  depositToken(
    token: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "depositToken(address,uint256)"(
    token: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  feeAccount(overrides?: CallOverrides): Promise<string>;

  "feeAccount()"(overrides?: CallOverrides): Promise<string>;

  feeTake(overrides?: CallOverrides): Promise<BigNumber>;

  "feeTake()"(overrides?: CallOverrides): Promise<BigNumber>;

  orderFills(
    arg0: string,
    arg1: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "orderFills(address,bytes32)"(
    arg0: string,
    arg1: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  orders(
    arg0: string,
    arg1: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "orders(address,bytes32)"(
    arg0: string,
    arg1: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  tokens(
    arg0: string,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "tokens(address,address)"(
    arg0: string,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  trade(
    tokenGet: string,
    amountGet: BigNumberish,
    tokenGive: string,
    amountGive: BigNumberish,
    expires: BigNumberish,
    nonce: BigNumberish,
    user: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "trade(address,uint256,address,uint256,uint256,uint256,address,uint256)"(
    tokenGet: string,
    amountGet: BigNumberish,
    tokenGive: string,
    amountGive: BigNumberish,
    expires: BigNumberish,
    nonce: BigNumberish,
    user: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  withdrawToken(
    token: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "withdrawToken(address,uint256)"(
    token: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    balanceOf(
      token: string,
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "balanceOf(address,address)"(
      token: string,
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    createOrder(
      tokenGet: string,
      amountGet: BigNumberish,
      tokenGive: string,
      amountGive: BigNumberish,
      expires: BigNumberish,
      nonce: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "createOrder(address,uint256,address,uint256,uint256,uint256)"(
      tokenGet: string,
      amountGet: BigNumberish,
      tokenGive: string,
      amountGive: BigNumberish,
      expires: BigNumberish,
      nonce: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    depositToken(
      token: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "depositToken(address,uint256)"(
      token: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    feeAccount(overrides?: CallOverrides): Promise<string>;

    "feeAccount()"(overrides?: CallOverrides): Promise<string>;

    feeTake(overrides?: CallOverrides): Promise<BigNumber>;

    "feeTake()"(overrides?: CallOverrides): Promise<BigNumber>;

    orderFills(
      arg0: string,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "orderFills(address,bytes32)"(
      arg0: string,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    orders(
      arg0: string,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "orders(address,bytes32)"(
      arg0: string,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    tokens(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "tokens(address,address)"(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    trade(
      tokenGet: string,
      amountGet: BigNumberish,
      tokenGive: string,
      amountGive: BigNumberish,
      expires: BigNumberish,
      nonce: BigNumberish,
      user: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "trade(address,uint256,address,uint256,uint256,uint256,address,uint256)"(
      tokenGet: string,
      amountGet: BigNumberish,
      tokenGive: string,
      amountGive: BigNumberish,
      expires: BigNumberish,
      nonce: BigNumberish,
      user: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawToken(
      token: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "withdrawToken(address,uint256)"(
      token: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    Deposit(token: null, user: null, amount: null, balance: null): EventFilter;

    Order(
      tokenGet: null,
      amountGet: null,
      tokenGive: null,
      amountGive: null,
      expires: null,
      nonce: null,
      user: null
    ): EventFilter;

    Trade(
      tokenGet: null,
      amountGet: null,
      tokenGive: null,
      amountGive: null,
      get: null,
      give: null
    ): EventFilter;

    Withdraw(token: null, user: null, amount: null, balance: null): EventFilter;
  };

  estimateGas: {
    balanceOf(
      token: string,
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "balanceOf(address,address)"(
      token: string,
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    createOrder(
      tokenGet: string,
      amountGet: BigNumberish,
      tokenGive: string,
      amountGive: BigNumberish,
      expires: BigNumberish,
      nonce: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "createOrder(address,uint256,address,uint256,uint256,uint256)"(
      tokenGet: string,
      amountGet: BigNumberish,
      tokenGive: string,
      amountGive: BigNumberish,
      expires: BigNumberish,
      nonce: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    depositToken(
      token: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "depositToken(address,uint256)"(
      token: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    feeAccount(overrides?: CallOverrides): Promise<BigNumber>;

    "feeAccount()"(overrides?: CallOverrides): Promise<BigNumber>;

    feeTake(overrides?: CallOverrides): Promise<BigNumber>;

    "feeTake()"(overrides?: CallOverrides): Promise<BigNumber>;

    orderFills(
      arg0: string,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "orderFills(address,bytes32)"(
      arg0: string,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    orders(
      arg0: string,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "orders(address,bytes32)"(
      arg0: string,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokens(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "tokens(address,address)"(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    trade(
      tokenGet: string,
      amountGet: BigNumberish,
      tokenGive: string,
      amountGive: BigNumberish,
      expires: BigNumberish,
      nonce: BigNumberish,
      user: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "trade(address,uint256,address,uint256,uint256,uint256,address,uint256)"(
      tokenGet: string,
      amountGet: BigNumberish,
      tokenGive: string,
      amountGive: BigNumberish,
      expires: BigNumberish,
      nonce: BigNumberish,
      user: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    withdrawToken(
      token: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "withdrawToken(address,uint256)"(
      token: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    balanceOf(
      token: string,
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "balanceOf(address,address)"(
      token: string,
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    createOrder(
      tokenGet: string,
      amountGet: BigNumberish,
      tokenGive: string,
      amountGive: BigNumberish,
      expires: BigNumberish,
      nonce: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "createOrder(address,uint256,address,uint256,uint256,uint256)"(
      tokenGet: string,
      amountGet: BigNumberish,
      tokenGive: string,
      amountGive: BigNumberish,
      expires: BigNumberish,
      nonce: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    depositToken(
      token: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "depositToken(address,uint256)"(
      token: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    feeAccount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "feeAccount()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    feeTake(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "feeTake()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    orderFills(
      arg0: string,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "orderFills(address,bytes32)"(
      arg0: string,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    orders(
      arg0: string,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "orders(address,bytes32)"(
      arg0: string,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokens(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "tokens(address,address)"(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    trade(
      tokenGet: string,
      amountGet: BigNumberish,
      tokenGive: string,
      amountGive: BigNumberish,
      expires: BigNumberish,
      nonce: BigNumberish,
      user: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "trade(address,uint256,address,uint256,uint256,uint256,address,uint256)"(
      tokenGet: string,
      amountGet: BigNumberish,
      tokenGive: string,
      amountGive: BigNumberish,
      expires: BigNumberish,
      nonce: BigNumberish,
      user: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    withdrawToken(
      token: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "withdrawToken(address,uint256)"(
      token: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
